{"version":3,"sources":["app.js"],"names":["draggableElements","document","querySelectorAll","droppableElements","dragStart","event","dataTransfer","setData","target","style","color","dragEnter","classList","contains","add","dragOver","preventDefault","dragLeave","remove","drop","draggableElementData","getData","backgroundColor","forEach","elem","addEventListener"],"mappings":"AAAA,MAAAA,kBAAAC,SAAAC,iBAAA,sCACAC,kBAAAF,SAAAC,iBAAA,yBAiBA,SAAAE,UAAAC,GACAA,EAAAC,aAAAC,QAAA,OAAAF,EAAAG,OAAAC,MAAAC,OAKA,SAAAC,UAAAN,GACAA,EAAAG,OAAAI,UAAAC,SAAA,YACAR,EAAAG,OAAAI,UAAAE,IAAA,mBAIA,SAAAC,SAAAV,GACAA,EAAAW,iBAGA,SAAAC,UAAAZ,GACAA,EAAAG,OAAAI,UAAAC,SAAA,YACAR,EAAAG,OAAAI,UAAAM,OAAA,mBAIA,SAAAC,KAAAd,GACAA,EAAAW,iBACA,MAAAI,EAAAf,EAAAC,aAAAe,QAAA,QACAhB,EAAAG,OAAAC,MAAAa,gBAAAF,EAxCApB,kBAAAuB,QAAAC,IACAA,EAAAC,iBAAA,YAAArB,aAGAD,kBAAAoB,QAAAC,IAEAA,EAAAC,iBAAA,WAAAV,UAEAS,EAAAC,iBAAA,OAAAN","file":"bundle.js","sourcesContent":["const draggableElements = document.querySelectorAll(\".choose-steps__pending-steps-title\");\r\nconst droppableElements = document.querySelectorAll(\".card__text-container\");\r\n\r\ndraggableElements.forEach(elem => {\r\n  elem.addEventListener(\"dragstart\", dragStart);\r\n});\r\n\r\ndroppableElements.forEach(elem => {\r\n//   elem.addEventListener(\"dragenter\", dragEnter); // Fires when a dragged item enters a valid drop target\r\n  elem.addEventListener(\"dragover\", dragOver); // Fires when a dragged item is being dragged over a valid drop target, repeatedly while the draggable item is within the drop zone\r\n//   elem.addEventListener(\"dragleave\", dragLeave); // Fires when a dragged item leaves a valid drop target\r\n  elem.addEventListener(\"drop\", drop); // Fires when an item is dropped on a valid drop target\r\n});\r\n\r\n// Drag and Drop Functions\r\n\r\n//Events fired on the drag target\r\n\r\nfunction dragStart(event) {\r\n  event.dataTransfer.setData(\"text\", event.target.style.color); // or \"text/plain\" but just \"text\" would also be fine since we are not setting any other type/format for data value\r\n}\r\n\r\n//Events fired on the drop target\r\n\r\nfunction dragEnter(event) {\r\n  if(!event.target.classList.contains(\"dropped\")) {\r\n    event.target.classList.add(\"droppable-hover\");\r\n  }\r\n}\r\n\r\nfunction dragOver(event) {\r\n    event.preventDefault();\r\n}\r\n\r\nfunction dragLeave(event) {\r\n  if(!event.target.classList.contains(\"dropped\")) {\r\n    event.target.classList.remove(\"droppable-hover\");\r\n  }\r\n}\r\n\r\nfunction drop(event) {\r\n  event.preventDefault(); \r\n  const draggableElementData = event.dataTransfer.getData(\"text\");\r\n  event.target.style.backgroundColor = draggableElementData;\r\n    // event.target.classList.remove(\"droppable-hover\");\r\n    // const draggableElementData = event.dataTransfer.getData(\"text\"); // Get the dragged data. This method will return any data that was set to the same type in the setData() method\r\n    // const droppableElementData = event.target.getAttribute(\"data-draggable-id\");\r\n    // const isCorrectMatching = draggableElementData === droppableElementData;\r\n    // if(isCorrectMatching) {\r\n    // const draggableElement = document.getElementById(draggableElementData);\r\n    // event.target.classList.add(\"dropped\");\r\n    // // event.target.style.backgroundColor = draggableElement.style.color; // This approach works only for inline styles. A more general approach would be the following: \r\n    // event.target.style.backgroundColor = window.getComputedStyle(draggableElement).color;\r\n    // draggableElement.classList.add(\"dragged\");\r\n    // draggableElement.setAttribute(\"draggable\", \"false\");\r\n    // event.target.insertAdjacentHTML(\"afterbegin\", `<i class=\"fas fa-${draggableElementData}\"></i>`);\r\n\r\n}\r\n"]}